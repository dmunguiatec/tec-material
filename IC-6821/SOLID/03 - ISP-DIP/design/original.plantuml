@startuml

title Antes

package expr {

    class ExpressionEvaluator {
        + {static} main(String[]): void
    }

    package repl {

        interface REPL {
            loop(): void
        }

        class ConsoleREPL {
        }

        REPL <|.. ConsoleREPL
        ExpressionEvaluator ..> REPL
    }

    package parser {
        interface ExpressionParser {
            + parse(:String): Optional<Expression>
        }

        class DefaultExpressionParser {
        }

        ConsoleREPL ..> ExpressionParser
        ExpressionParser <|.. DefaultExpressionParser
    }

    package expression {

        interface ExpressionFactory {
            + create(op:String, operandA:Integer, operandB:Integer): Expression
            + create(op:String, operandA:Double, operandB:Double): Expression
        }

        class DefaultExpressionFactory {
            - {static} intFactories:Map<String, ExpressionFactory>
            - {static} fpFactories:Map<String, ExpressionFactory>

            + {static} registerFPFactory(op:String, :ExpressionFactory): void
            + {static} registerIntFactory(op:String, :ExpressionFactory): void
        }

        class AddExpressionFactory {
        }

        class SubExpressionFactory {
        }

        class MulExpressionFactory {
        }

        class QuotExpressionFactory {
        }

        ExpressionFactory <|.. DefaultExpressionFactory
        ExpressionFactory <|.. AddExpressionFactory
        ExpressionFactory <|.. SubExpressionFactory
        ExpressionFactory <|.. MulExpressionFactory
        ExpressionFactory <|.. QuotExpressionFactory

        AddExpressionFactory ..> AddExpression
        SubExpressionFactory ..> SubExpression
        MulExpressionFactory ..> MulExpression
        QuotExpressionFactory ..> QuotExpression

        AddExpression ..|> Expression
        SubExpression ..|> Expression
        MulExpression ..|> Expression
        QuotExpression ..|> Expression

        class FPAddExpressionFactory {
        }

        class FPSubExpressionFactory {
        }

        class FPMulExpressionFactory {
        }

        class FPDivExpressionFactory {
        }

        ExpressionFactory <|.. DefaultExpressionFactory
        ExpressionFactory <|.. FPAddExpressionFactory
        ExpressionFactory <|.. FPSubExpressionFactory
        ExpressionFactory <|.. FPMulExpressionFactory
        ExpressionFactory <|.. FPDivExpressionFactory

        FPAddExpressionFactory ..> FPAddExpression
        FPSubExpressionFactory ..> FPSubExpression
        FPMulExpressionFactory ..> FPMulExpression
        FPDivExpressionFactory ..> FPDivExpression

        FPAddExpression ..|> Expression
        FPSubExpression ..|> Expression
        FPMulExpression ..|> Expression
        FPDivExpression ..|> Expression

        interface Expression {
            + eval(): Integer
            + evalFP(): Double
            + getType(): ExpressionType
        }

        enum ExpressionType {
            INT,
            FP
        }

        Expression --> ExpressionType

        DefaultExpressionFactory ..> Expression

        class AddExpression {
            - operandA: Integer
            - operandB: Integer
            - operator: String
            + AddExpression(:String, :Integer, :Integer)
        }

        class SubExpression {
            - operandA: Integer
            - operandB: Integer
            - operator: String
            + SubExpression(:String, :Integer, :Integer)
        }

        class MulExpression {
            - operandA: Integer
            - operandB: Integer
            - operator: String
            + MulExpression(:String, :Integer, :Integer)
        }
        class QuotExpression {
            - operandA: Integer
            - operandB: Integer
            - operator: String
            + QuotExpression(:String, :Integer, :Integer)
        }

        class FPAddExpression {
            - operandA: Double
            - operandB: Double
            - operator: String
            + AddExpression(:String, :Double, :Double)
        }

        class FPSubExpression {
            - operandA: Double
            - operandB: Double
            - operator: String
            + SubExpression(:String, :Double, :Double)
        }

        class FPMulExpression {
            - operandA: Double
            - operandB: Double
            - operator: String
            + MulExpression(:String, :Double, :Double)
        }
        class FPDivExpression {
            - operandA: Double
            - operandB: Double
            - operator: String
            + QuotExpression(:String, :Double, :Double)
        }

        DefaultExpressionParser .left.> Expression
        DefaultExpressionParser .left.> ExpressionFactory
    }
}

@enduml